// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ! Decide the a fixed timezone for the whole system either UTC or IST

// ! Decide if we want to use a single model for authInfo or separate models for each Type of person
// ! Auth info will contain the email and name of the person who is signing up, but can also include things like reports, invites, roles, tier, etc.

// ! Refine models further making them efficient and easy to use (eg. add/remove fields, add/remove relations, etc.) - invite campaign, invite, bounty info, etc.

// ! Also figure out transaction processing and handling (handled via UPI)

// Admin/Staff Section - For internal abstraction
enum Role {
  Admin
  Manager
  Staff
}

model HostEmployee {
  id             String                @id @default(uuid())
  name           String
  email          String                @unique
  password       HostEmployeePassword?
  role           Role                  @default(Staff)
  companyAccess  Company[]
  severityAccess Severity[]            @default([P3_High, P4_Moderate, P5_Low])
  invites        Invite[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@map("hostEmployees")
}

model HostEmployeePassword {
  hash String

  user   HostEmployee @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String       @unique
}

// Users/Hackers Section

// Add more tiers if needed
enum TierId {
  Beginner
  Learner
  Proficient
  Master
  Ace
  Legend
  OverLord
  God
}

// Models
model User {
  id        String        @id @unique @default(uuid())
  name      String        @unique
  email     String        @unique
  tierId    TierId        @default(Beginner)
  password  UserPassword?
  reports   Report[]
  invites   Invite[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("users")
}

model UserPassword {
  hash String

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique
}

// Company Section
enum CompanyEmployeeStatus {
  Senior
  Junior
}

model Company {
  id            String            @id @unique @default(uuid())
  name          String            @unique
  description   String
  isPublic      Boolean           @default(false)
  Report        Report[]
  hostEmployees HostEmployee[]
  privateStaff  CompanyEmployee[]
  invites       Invite[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("companies")
}

model CompanyEmployee {
  id        String                @id @unique @default(cuid())
  name      String                @unique
  email     String                @unique
  status    CompanyEmployeeStatus @default(Junior)
  company   Company               @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
  invites   Invite[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@map("companyEmployees")
}

// Shared

// Enums
enum Status {
  Pending
  NeedsMoreInfo
  Accepted
  Rejected
}

enum Severity {
  P1_Critical
  P2_Major
  P3_High
  P4_Moderate
  P5_Low
}

// Models
// model authInfo {
//   id        String   @id @unique @default(uuid())
//   name      String   @unique
//   email     String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("authInfo")
// }

model Invite {
  id                      String           @id @unique @default(cuid())
  acceptanceStatus        Boolean?         @default(false)
  cancelAtPeriodEnd       Boolean?         @default(false)
  periodEnd               DateTime?
  company                 Company          @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId               String
  receiverUser            User             @relation(fields: [receiverUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverUserId          String           @unique
  senderCompanyEmployee   CompanyEmployee? @relation(fields: [senderCompanyEmployeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderCompanyEmployeeId String?          @unique
  senderHostEmployee      HostEmployee?    @relation(fields: [senderHostEmployeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderHostEmployeeId    String?          @unique
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  InviteCampaign          InviteCampaign?  @relation(fields: [inviteCampaignId], references: [id])
  inviteCampaignId        String?

  @@map("invites")
}

model InviteCampaign {
  id               String   @id @unique @default(cuid())
  randomPool       Boolean  @default(true)
  numberOfInvites  Int      @default(15)
  tierId           TierId   @default(Learner)
  repeat           Boolean  @default(false)
  //TODO: Add Range to Period Days in zod type check till 30 days
  repeatPeriodDays Int      @default(7)
  invites          Invite[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("inviteCampaigns")
}

model Report {
  id          String       @id @unique @default(uuid())
  isPublic    Boolean      @default(false)
  status      Status       @default(Pending)
  isDuplicate Boolean      @default(false)
  content     String
  priority    Severity
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String
  BountyInfo  BountyInfo[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("reports")
}

model BountyInfo {
  id             String   @id @unique @default(uuid())
  bountyPoints   Int      @default(0)
  bountyRewarded Int      @default(0)
  report         Report   @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("bountyInfo")
}
